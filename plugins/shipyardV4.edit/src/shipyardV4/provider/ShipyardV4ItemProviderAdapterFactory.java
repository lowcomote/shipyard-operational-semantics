/**
 */
package shipyardV4.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import shipyardV4.util.ShipyardV4AdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ShipyardV4ItemProviderAdapterFactory extends ShipyardV4AdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ShipyardV4ItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link shipyardV4.ShipyardV4Root} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShipyardV4RootItemProvider shipyardV4RootItemProvider;

	/**
	 * This creates an adapter for a {@link shipyardV4.ShipyardV4Root}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShipyardV4RootAdapter() {
		if (shipyardV4RootItemProvider == null) {
			shipyardV4RootItemProvider = new ShipyardV4RootItemProvider(this);
		}

		return shipyardV4RootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shipyardV4.Metadata} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MetadataItemProvider metadataItemProvider;

	/**
	 * This creates an adapter for a {@link shipyardV4.Metadata}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMetadataAdapter() {
		if (metadataItemProvider == null) {
			metadataItemProvider = new MetadataItemProvider(this);
		}

		return metadataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shipyardV4.Selector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SelectorItemProvider selectorItemProvider;

	/**
	 * This creates an adapter for a {@link shipyardV4.Selector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSelectorAdapter() {
		if (selectorItemProvider == null) {
			selectorItemProvider = new SelectorItemProvider(this);
		}

		return selectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shipyardV4.Sequence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SequenceItemProvider sequenceItemProvider;

	/**
	 * This creates an adapter for a {@link shipyardV4.Sequence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSequenceAdapter() {
		if (sequenceItemProvider == null) {
			sequenceItemProvider = new SequenceItemProvider(this);
		}

		return sequenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shipyardV4.Shipyard} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShipyardItemProvider shipyardItemProvider;

	/**
	 * This creates an adapter for a {@link shipyardV4.Shipyard}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShipyardAdapter() {
		if (shipyardItemProvider == null) {
			shipyardItemProvider = new ShipyardItemProvider(this);
		}

		return shipyardItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shipyardV4.ShipyardSpec} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShipyardSpecItemProvider shipyardSpecItemProvider;

	/**
	 * This creates an adapter for a {@link shipyardV4.ShipyardSpec}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShipyardSpecAdapter() {
		if (shipyardSpecItemProvider == null) {
			shipyardSpecItemProvider = new ShipyardSpecItemProvider(this);
		}

		return shipyardSpecItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shipyardV4.Stage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StageItemProvider stageItemProvider;

	/**
	 * This creates an adapter for a {@link shipyardV4.Stage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStageAdapter() {
		if (stageItemProvider == null) {
			stageItemProvider = new StageItemProvider(this);
		}

		return stageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shipyardV4.Task} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskItemProvider taskItemProvider;

	/**
	 * This creates an adapter for a {@link shipyardV4.Task}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskAdapter() {
		if (taskItemProvider == null) {
			taskItemProvider = new TaskItemProvider(this);
		}

		return taskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shipyardV4.Trigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TriggerItemProvider triggerItemProvider;

	/**
	 * This creates an adapter for a {@link shipyardV4.Trigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTriggerAdapter() {
		if (triggerItemProvider == null) {
			triggerItemProvider = new TriggerItemProvider(this);
		}

		return triggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shipyardV4.MetadataName} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MetadataNameItemProvider metadataNameItemProvider;

	/**
	 * This creates an adapter for a {@link shipyardV4.MetadataName}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMetadataNameAdapter() {
		if (metadataNameItemProvider == null) {
			metadataNameItemProvider = new MetadataNameItemProvider(this);
		}

		return metadataNameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shipyardV4.SelectorMatch} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SelectorMatchItemProvider selectorMatchItemProvider;

	/**
	 * This creates an adapter for a {@link shipyardV4.SelectorMatch}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSelectorMatchAdapter() {
		if (selectorMatchItemProvider == null) {
			selectorMatchItemProvider = new SelectorMatchItemProvider(this);
		}

		return selectorMatchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shipyardV4.SequenceName} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SequenceNameItemProvider sequenceNameItemProvider;

	/**
	 * This creates an adapter for a {@link shipyardV4.SequenceName}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSequenceNameAdapter() {
		if (sequenceNameItemProvider == null) {
			sequenceNameItemProvider = new SequenceNameItemProvider(this);
		}

		return sequenceNameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shipyardV4.SequenceTriggeredOn} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SequenceTriggeredOnItemProvider sequenceTriggeredOnItemProvider;

	/**
	 * This creates an adapter for a {@link shipyardV4.SequenceTriggeredOn}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSequenceTriggeredOnAdapter() {
		if (sequenceTriggeredOnItemProvider == null) {
			sequenceTriggeredOnItemProvider = new SequenceTriggeredOnItemProvider(this);
		}

		return sequenceTriggeredOnItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shipyardV4.SequenceTasks} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SequenceTasksItemProvider sequenceTasksItemProvider;

	/**
	 * This creates an adapter for a {@link shipyardV4.SequenceTasks}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSequenceTasksAdapter() {
		if (sequenceTasksItemProvider == null) {
			sequenceTasksItemProvider = new SequenceTasksItemProvider(this);
		}

		return sequenceTasksItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shipyardV4.ShipyardApiVersion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShipyardApiVersionItemProvider shipyardApiVersionItemProvider;

	/**
	 * This creates an adapter for a {@link shipyardV4.ShipyardApiVersion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShipyardApiVersionAdapter() {
		if (shipyardApiVersionItemProvider == null) {
			shipyardApiVersionItemProvider = new ShipyardApiVersionItemProvider(this);
		}

		return shipyardApiVersionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shipyardV4.ShipyardKind} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShipyardKindItemProvider shipyardKindItemProvider;

	/**
	 * This creates an adapter for a {@link shipyardV4.ShipyardKind}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShipyardKindAdapter() {
		if (shipyardKindItemProvider == null) {
			shipyardKindItemProvider = new ShipyardKindItemProvider(this);
		}

		return shipyardKindItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shipyardV4.ShipyardMetadata} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShipyardMetadataItemProvider shipyardMetadataItemProvider;

	/**
	 * This creates an adapter for a {@link shipyardV4.ShipyardMetadata}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShipyardMetadataAdapter() {
		if (shipyardMetadataItemProvider == null) {
			shipyardMetadataItemProvider = new ShipyardMetadataItemProvider(this);
		}

		return shipyardMetadataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shipyardV4.ShipyardSpec1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShipyardSpec1ItemProvider shipyardSpec1ItemProvider;

	/**
	 * This creates an adapter for a {@link shipyardV4.ShipyardSpec1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShipyardSpec1Adapter() {
		if (shipyardSpec1ItemProvider == null) {
			shipyardSpec1ItemProvider = new ShipyardSpec1ItemProvider(this);
		}

		return shipyardSpec1ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shipyardV4.ShipyardSpecStages} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShipyardSpecStagesItemProvider shipyardSpecStagesItemProvider;

	/**
	 * This creates an adapter for a {@link shipyardV4.ShipyardSpecStages}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShipyardSpecStagesAdapter() {
		if (shipyardSpecStagesItemProvider == null) {
			shipyardSpecStagesItemProvider = new ShipyardSpecStagesItemProvider(this);
		}

		return shipyardSpecStagesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shipyardV4.StageName} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StageNameItemProvider stageNameItemProvider;

	/**
	 * This creates an adapter for a {@link shipyardV4.StageName}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStageNameAdapter() {
		if (stageNameItemProvider == null) {
			stageNameItemProvider = new StageNameItemProvider(this);
		}

		return stageNameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shipyardV4.StageSequences} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StageSequencesItemProvider stageSequencesItemProvider;

	/**
	 * This creates an adapter for a {@link shipyardV4.StageSequences}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStageSequencesAdapter() {
		if (stageSequencesItemProvider == null) {
			stageSequencesItemProvider = new StageSequencesItemProvider(this);
		}

		return stageSequencesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shipyardV4.TaskName} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskNameItemProvider taskNameItemProvider;

	/**
	 * This creates an adapter for a {@link shipyardV4.TaskName}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskNameAdapter() {
		if (taskNameItemProvider == null) {
			taskNameItemProvider = new TaskNameItemProvider(this);
		}

		return taskNameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shipyardV4.TaskProperties} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskPropertiesItemProvider taskPropertiesItemProvider;

	/**
	 * This creates an adapter for a {@link shipyardV4.TaskProperties}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskPropertiesAdapter() {
		if (taskPropertiesItemProvider == null) {
			taskPropertiesItemProvider = new TaskPropertiesItemProvider(this);
		}

		return taskPropertiesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shipyardV4.TriggerEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TriggerEventItemProvider triggerEventItemProvider;

	/**
	 * This creates an adapter for a {@link shipyardV4.TriggerEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTriggerEventAdapter() {
		if (triggerEventItemProvider == null) {
			triggerEventItemProvider = new TriggerEventItemProvider(this);
		}

		return triggerEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shipyardV4.TriggerSelector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TriggerSelectorItemProvider triggerSelectorItemProvider;

	/**
	 * This creates an adapter for a {@link shipyardV4.TriggerSelector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTriggerSelectorAdapter() {
		if (triggerSelectorItemProvider == null) {
			triggerSelectorItemProvider = new TriggerSelectorItemProvider(this);
		}

		return triggerSelectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shipyardV4.SelectorMatchPatternProperties0} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SelectorMatchPatternProperties0ItemProvider selectorMatchPatternProperties0ItemProvider;

	/**
	 * This creates an adapter for a {@link shipyardV4.SelectorMatchPatternProperties0}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSelectorMatchPatternProperties0Adapter() {
		if (selectorMatchPatternProperties0ItemProvider == null) {
			selectorMatchPatternProperties0ItemProvider = new SelectorMatchPatternProperties0ItemProvider(this);
		}

		return selectorMatchPatternProperties0ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shipyardV4.TaskPropertiesAdditionalProperties} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskPropertiesAdditionalPropertiesItemProvider taskPropertiesAdditionalPropertiesItemProvider;

	/**
	 * This creates an adapter for a {@link shipyardV4.TaskPropertiesAdditionalProperties}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskPropertiesAdditionalPropertiesAdapter() {
		if (taskPropertiesAdditionalPropertiesItemProvider == null) {
			taskPropertiesAdditionalPropertiesItemProvider = new TaskPropertiesAdditionalPropertiesItemProvider(this);
		}

		return taskPropertiesAdditionalPropertiesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shipyardV4.SequenceTriggeredOnItems} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SequenceTriggeredOnItemsItemProvider sequenceTriggeredOnItemsItemProvider;

	/**
	 * This creates an adapter for a {@link shipyardV4.SequenceTriggeredOnItems}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSequenceTriggeredOnItemsAdapter() {
		if (sequenceTriggeredOnItemsItemProvider == null) {
			sequenceTriggeredOnItemsItemProvider = new SequenceTriggeredOnItemsItemProvider(this);
		}

		return sequenceTriggeredOnItemsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shipyardV4.SequenceTasksItems} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SequenceTasksItemsItemProvider sequenceTasksItemsItemProvider;

	/**
	 * This creates an adapter for a {@link shipyardV4.SequenceTasksItems}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSequenceTasksItemsAdapter() {
		if (sequenceTasksItemsItemProvider == null) {
			sequenceTasksItemsItemProvider = new SequenceTasksItemsItemProvider(this);
		}

		return sequenceTasksItemsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shipyardV4.ShipyardSpecStagesItems} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShipyardSpecStagesItemsItemProvider shipyardSpecStagesItemsItemProvider;

	/**
	 * This creates an adapter for a {@link shipyardV4.ShipyardSpecStagesItems}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShipyardSpecStagesItemsAdapter() {
		if (shipyardSpecStagesItemsItemProvider == null) {
			shipyardSpecStagesItemsItemProvider = new ShipyardSpecStagesItemsItemProvider(this);
		}

		return shipyardSpecStagesItemsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shipyardV4.StageSequencesItems} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StageSequencesItemsItemProvider stageSequencesItemsItemProvider;

	/**
	 * This creates an adapter for a {@link shipyardV4.StageSequencesItems}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStageSequencesItemsAdapter() {
		if (stageSequencesItemsItemProvider == null) {
			stageSequencesItemsItemProvider = new StageSequencesItemsItemProvider(this);
		}

		return stageSequencesItemsItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (shipyardV4RootItemProvider != null) shipyardV4RootItemProvider.dispose();
		if (metadataItemProvider != null) metadataItemProvider.dispose();
		if (selectorItemProvider != null) selectorItemProvider.dispose();
		if (sequenceItemProvider != null) sequenceItemProvider.dispose();
		if (shipyardItemProvider != null) shipyardItemProvider.dispose();
		if (shipyardSpecItemProvider != null) shipyardSpecItemProvider.dispose();
		if (stageItemProvider != null) stageItemProvider.dispose();
		if (taskItemProvider != null) taskItemProvider.dispose();
		if (triggerItemProvider != null) triggerItemProvider.dispose();
		if (metadataNameItemProvider != null) metadataNameItemProvider.dispose();
		if (selectorMatchItemProvider != null) selectorMatchItemProvider.dispose();
		if (sequenceNameItemProvider != null) sequenceNameItemProvider.dispose();
		if (sequenceTriggeredOnItemProvider != null) sequenceTriggeredOnItemProvider.dispose();
		if (sequenceTasksItemProvider != null) sequenceTasksItemProvider.dispose();
		if (shipyardApiVersionItemProvider != null) shipyardApiVersionItemProvider.dispose();
		if (shipyardKindItemProvider != null) shipyardKindItemProvider.dispose();
		if (shipyardMetadataItemProvider != null) shipyardMetadataItemProvider.dispose();
		if (shipyardSpec1ItemProvider != null) shipyardSpec1ItemProvider.dispose();
		if (shipyardSpecStagesItemProvider != null) shipyardSpecStagesItemProvider.dispose();
		if (stageNameItemProvider != null) stageNameItemProvider.dispose();
		if (stageSequencesItemProvider != null) stageSequencesItemProvider.dispose();
		if (taskNameItemProvider != null) taskNameItemProvider.dispose();
		if (taskPropertiesItemProvider != null) taskPropertiesItemProvider.dispose();
		if (triggerEventItemProvider != null) triggerEventItemProvider.dispose();
		if (triggerSelectorItemProvider != null) triggerSelectorItemProvider.dispose();
		if (selectorMatchPatternProperties0ItemProvider != null) selectorMatchPatternProperties0ItemProvider.dispose();
		if (taskPropertiesAdditionalPropertiesItemProvider != null) taskPropertiesAdditionalPropertiesItemProvider.dispose();
		if (sequenceTriggeredOnItemsItemProvider != null) sequenceTriggeredOnItemsItemProvider.dispose();
		if (sequenceTasksItemsItemProvider != null) sequenceTasksItemsItemProvider.dispose();
		if (shipyardSpecStagesItemsItemProvider != null) shipyardSpecStagesItemsItemProvider.dispose();
		if (stageSequencesItemsItemProvider != null) stageSequencesItemsItemProvider.dispose();
	}

}
